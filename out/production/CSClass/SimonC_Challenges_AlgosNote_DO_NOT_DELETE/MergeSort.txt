Merge Sort
A merge sort is a more complex algorithm than the others covered. It works by dividing the original array into smaller and smaller sub-arrays until each element is in its own sub-array, then merging these subarrays back together, in the correct order. Take a look at the graphic below for a nice visualization of this process.



The steps to perform a merge sort can be simplified to:

Divide the array into two halves until each sub-array contains a single item
Compare each element in each sub-array with its adjacent element, and merge them in order.
Repeat step 2 for each pair of adjacent sub-arrays until there is only one sorted array.
The man benefit of using a merge sort is its efficiency, especially when dealing with large data sets.

Follow the comments in the code to help you complete the merge sort, and give the correct output.

Add code at lines 49, 63, 75, and 82.
Delete lines 57, 58, and 59. They are there to make the code run, without producing errors, with the code you need to write missing

Expected Input

10 integers
In the range of 1-100
To be added to the array that needs to be sorted
e.g.
3
4
5
6
1
9
10
22
8
23

Expected Output

The original array
A list of the sub-arrays
The merge between two sub-arrays
The fial, sorted array
e.g.
Original
[ 3 4 5 6 1 9 10 22 8 23 ]

left
[ 3 ]

right
[ 4 ]

3 4

left
[ 3 4 ]

right
[ 5 ]

3 4 5

left
[ 6 ]

right
[ 1 ]

1 6

left
[ 3 4 5 ]

right
[ 1 6 ]

1 3 4 5 6

left
[ 9 ]

right
[ 10 ]

9 10

left
[ 9 10 ]

right
[ 22 ]

9 10 22

left
[ 8 ]

right
[ 23 ]

8 23

left
[ 9 10 22 ]

right
[ 8 23 ]

8 9 10 22 23

left
[ 1 3 4 5 6 ]

right
[ 8 9 10 22 23 ]

1 3 4 5 6 8 9 10 22 23


Sorted
[ 1 3 4 5 6 8 9 10 22 23 ]